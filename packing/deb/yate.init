#!/bin/sh
### BEGIN INIT INFO
# Provides:          yate
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Should-Start:      $time $network $named $syslog wanpipe zaptel mysql postgresql
# Should-Stop:       $time $network $named $syslog wanpipe zaptel mysql postgresql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: YATE
# Description:       YATE telephony engine
### END INIT INFO

# Author: Philipp Kempgen <philipp.kempgen@amooma.de>
# based on /etc/init.d/skeleton

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="YATE"
NAME=yate
DAEMON=/usr/bin/$NAME
DAEMON_ARGS="-F -s -r -l /var/log/yate -vvv -Df"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

[ -z "$NO_START" ]    && NO_START=0
[ -z "$DAEMON_ARGS" ] && DAEMON_ARGS="-d"
[ -z "$YATE_USER" ]   && YATE_USER="root"
[ -z "$YATE_GROUP" ]  && YATE_GROUP="root"
[ -z "$NICE_LEVEL" ]  && NICE_LEVEL="-4"

if [ "$NO_START" = "1" ]; then
	echo "/etc/default/yate tells Yate not to start."
	exit 0
fi

# DAEMON_ARGS might be called DAEMON_OPTS in /etc/default/yate
if [ ! -z "$DAEMON_OPTS" ]; then
	DAEMON_ARGS="$DAEMON_OPTS"
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	if ! getent passwd $YATE_USER >>/dev/null ; then
		log_end_msg 1
		log_failure_msg "User \"$YATE_USER\" not found."
		exit 1
	fi
	if ! getent group $YATE_GROUP >>/dev/null ; then
		log_end_msg 1
		log_failure_msg "Group \"$YATE_GROUP\" not found."
		exit 1
	fi

	export PWLIB_ASSERT_ACTION=C
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
		--exec $DAEMON --test >>/dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE \
		--nicelevel $NICE_LEVEL \
		--user $YATE_USER --group $YATE_GROUP \
		--exec $DAEMON -- -d -p $PIDFILE $DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal HUP --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in

	start)
		[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
		do_start
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;

	stop)
		[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		esac
		;;

	reload|force-reload)
		log_daemon_msg "Reloading $DESC modules" "$NAME"
		do_reload
		log_end_msg $?
		;;

	restart)
		log_daemon_msg "Restarting $DESC" "$NAME"
		do_stop
		case "$?" in
			0|1)
				do_start
				case "$?" in
					0) log_end_msg 0 ;;
					1) log_end_msg 1 ;; # Old process is still running
					*) log_end_msg 1 ;; # Failed to start
				esac
				;;
			*)
				# Failed to stop
				log_end_msg 1
				;;
		esac
		;;

	status)
		daemon_pid=`pidofproc "$DAEMON"`
		status="$?"
		case "$status" in
			0) log_success_msg "$DESC is running (pid $daemon_pid)" ;;
			1) log_failure_msg "$DESC is dead but pid file $PIDFILE exists" ;;
			3) log_failure_msg "$DESC is not running" ;;
			*) log_failure_msg "$DESC - ?" ;;
		esac
		exit $status
		;;

	*)
		echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload|status}" >&2
		exit 3
		;;
esac
